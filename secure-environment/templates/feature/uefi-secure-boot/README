UEFI Secure Boot Notes
======================

UEFI secure boot is the industry standard defined in the UEFI spec, allowing
the images loaded by UEFI BIOS to be verified with the trusted key.

A complete verification flow with UEFI secure boot is:
UEFI BIOS (UEFI secure boot enabled) ->
  grub2 (verified by DB) ->
      kernel (verified by DB)

For out-of-box use, the default certificate used to verify grub2 is Microsoft
Corporation UEFI CA 2011. This means the grub2 must be signed by Microsoft.
Otherwise the system cannot boot up. However, Microsoft signing policy refuses
to sign grub2 licensed under GPLv3. To work around this issue, a present user
needs to disable UEFI secure boot in BIOS setup and enroll the self-owned
certificate to replace the default Microsoft certificate, and then sign grub2
and kernel with the self-owned key. Refer to the section "Automatic Key Provision"
for details about how to make the key enrollment automatical, and refer to
feature/user-key-store-test to use the self-owned key for signing.

Alternately, the shim loader provided by MOK secure boot can be used without
the necessity of replacing the default Microsoft certificate. See
feature/mok-secure-boot based on this template (feature/uefi-secure-boot) for
the details about MOK secure boot and shim.

Key Management
==============

Sample Keys
-----------
This template (feature/uefi-secure-boot), by default, use the sample keys
generated by Wind River for signing and verifing images for test, development
and demonstration. Please ensure you know what your risk is to use them in
your product.

The sample keys are centrally placed under files/uefi_sb_keys. This template
uses the following key pair:

  * PK.pem
    The X509 certificate enrolled to UEFI BIOS, used to update/delete PK/KEK.

  * PK.key
    The private key corresponding to PK.pem, used to sign the EFI signature
    list for PK/KEK enrollment.

  * KEK.pem
    The X509 certificate enrolled to UEFI BIOS, used to update/delete
    DB/DBX.

  * KEK.key
    The private key corresponding to KEK.pem, used to sign the EFI signature
    list for DB/DBX enrollment.

  * DB.pem
    The X509 certificate enrolled to UEFI BIOS, used to verify the images
    directly loaded by UEFI BIOS.

  * DB.key
    The private key corresponding to DB.pem, used to sign the images directly
    loaded by UEFI BIOS.

  * DBX
    This directory contains any number of X509 certificate enrolled to UEFI
    BIOS, used to blacklist the revoked certificates.

User Keys
---------
Refer to feature/user-key-store-test for the details about how to generate/use
the keys owned by the user.

Automatic Key Provision
-----------------------
The key provision is required to enable UEFI secure boot. By default, the
target has been already provisioned with the default keys enrolled during
the manufacture. In order to enroll the sample keys or the keys owned by
the end user, please follow up the instructions below and select either
way you prefer.

[Create a boot entry in grub boot menu]
Creating a boot entry in grub boot menu is recommended. Note that the build
system will automatically create such a boot entry called "Automatic Key Provision"
in grub boot menu without the necessity of manual creation.

[Create a BIOS boot option]
This way will create a nonvolatile BIOS boot option which can launch the
LockDown.efi program for the automatic key provision. However, certain
hardware (e.g, Intel NUC5i3MYHE) has a limit on creation such a customized
boot option. If your BIOS doesn't display the created boot option, please
follow up above section to create a boot option for key provision.

- Preparation
  Enter to BIOS setup, disable UEFI secure boot and delete all installed
  default keys.

- Boot to Linux

- Create the boot option for "Automatic Key Provision"
# efibootmgr --create-only --label "Automatic key provision" \
  --loader '\EFI\BOOT\LockDown.efi' --disk /dev/<disk> -v

where <disk> is the device name containing LockDown.efi in Linux. For example,
/dev/sdb is a bootable USB drive with ESP partition. The output looks like
this:
BootCurrent: 0009
Timeout: 2 seconds
BootOrder: 0009,0008,0004
Boot0004* UEFI: Built-in EFI Shell      VenMedia(5023b95c-db26-429b-a648-bd47664c8012)..BO
Boot0008* UEFI OS       HD(1,GPT,f82c155d-d61b-4ed7-9bd1-03e335461b23,0x800,0x3d000)/File(\EFI\BOOT\BOOTX64.EFI)
Boot0009* UEFI: SanDisk Cruzer Blade 1.26       PciRoot(0x0)/Pci(0x14,0x0)/USB(1,0)/HD(1,GPT,d6174c0a-e043-4a95-82bc-1f11622e62c5,0x800,0x79800)..BO
Boot0000* Automatic key provision  HD(1,GPT,d6174c0a-e043-4a95-82bc-1f11622e62c5,0x800,0x79800)/File(\EFI\BOOT\LockDown.efi)

Note the boot option number 0 is created.

- Boot to "Automatic Key Provision" for next boot
# efibootmgr --bootnext <hex>

where <hex> is the new boot option created in previous step. Here is the
example output if <hex> is set to 0:
BootNext: 0000
BootCurrent: 0009
Timeout: 2 seconds
BootOrder: 0009,0008,0004
Boot0004* UEFI: Built-in EFI Shell 
Boot0008* UEFI OS
Boot0009* UEFI: SanDisk Cruzer Blade 1.26
Boot0000* Automatic key provision

Note that the key provision occurs once only, so it is not necessary
to make it always bootable.

- Reset system
# reboot

Kernel Verification
===================

When grub2 loads kernel image with the chainloader command, if UEFI Secure
Boot is already enabled in BIOS, the UEFI BIOS will validate the kernel image
sighed with the private key corresponding to one of certificates enrolled in
DB and not in DBX.

By default, the build system will use DB.key to automatically sign the kernel
image during the build. Meanwhile, LockDown.efi as above mentioned will enroll
the corresponding DB.pem into DB to grant the kernel verification for next boot.

Manually Sign Kernel Image
--------------------------
Run the following commands on the build host:

$ cd $project
$ tmp/sysroots/intel-corei7-64/usr/bin/sbsign \
    --key <key> --cert <cert> --output bzImage.signed \
    tmp/deploy/images/intel-corei7-64/efi-unsigned/bzImage
$ tmp/sysroots/intel-corei7-64/usr/bin/sbsign \
    --key <key> --cert <cert> --output grub.efi.signed \
    tmp/deploy/images/intel-corei7-64/efi-unsigned/bootx64.efi

where <key> is the private key file used to sign the kernel image, and <cert>
is the corresponding certificate file.

Example Boot Menu Entry in grub.cfg
-----------------------------------
Be aware of the fact that the linux command used to parse and load kernel image
is not working on the verification of kernel image. Actually it follows up linux
boot protocol and doesn't run into the validation path provided by UEFI Secure
Boot. Therefore, the boot menu entry written in grub.cfg must use the
chainloader command like this:

menuentry 'Kernel Verification' {
    chainloader /bzImage.signed root=/dev/sdb2 rw rootwait
}

Note:
- The initrd command thus becomes not working as well because it depends on the
kernel command, implying the detached initramfs image is not supported with
the verification. To work around this issue, the initramfs can be bundled with
bzImage during the build, and thus the initrd image is trusted. Alternately,
use initrd= argument like this:
    chainloader /bzImage.signed root=/dev/sdb2 rw rootwait initrd=<initrd>
However, this way doesn't verify <initrd> image.
- The kernel must be configured with CONFIG_EFI_STUB enabled.
