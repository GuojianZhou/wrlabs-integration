Mok Secure Boot Notes
=====================

Mok secure boot is based on the industry standard UEFI secure boot, adding
the shim loader to chainloader the second-stage bootloader like grub2.

[ Quoting: https://github.com/rhinstaller/shim ]
shim is a trivial EFI application that, when run, attempts to open and
execute another application. It will initially attempt to do this via the
standard EFI LoadImage() and StartImage() calls. If these fail (because secure
boot is enabled and the binary is not signed with an appropriate key, for
instance) it will then validate the binary against a built-in certificate. If
this succeeds and if the binary or signing key are not blacklisted then shim
will relocate and execute the binary.

shim will also install a protocol which permits the second-stage bootloader
to perform similar binary validation. This protocol has a GUID as described
in the shim.h header file and provides a single entry point. On 64-bit systems
this entry point expects to be called with SysV ABI rather than MSABI, and
so calls to it should not be wrapped.
[ End of Quote ]

shim + grub2 is the mainstream used by many linux distributions to handle
Microsoft certificated hardware with a windows logo sticker. For this
kind of machines, Microsoft requires OEM enables UEFI secure boot by
default, and the default key chains to Microsoft UEFI CA.

Obviously, this requirement needs the bootloader directly loaded by BIOS
must be signed with Microsoft's key. Microsoft provides with signing
service (not free), and only accept shim loader for Linux world. Refer to
Microsoft's signing policy from here:
http://blogs.msdn.com/b/windows_hardware_certification/archive/2013/12/03/microsoft-uefi-ca-signing-policy-updates.aspx

We carefully handle the packages licensed under GPLv3 like grub2 all the
time. According to the Microsoft's signing policy above, the bootloader
prepared to be submitted to Microsoft for signing must not be subject to
GPLv3 which purports to give end user the right to demand authorization
keys to be able to install modified forms of the code on a device. If a
customer is a device vendor and hope to secure the system with UEFI secure
boot, shim + grub2 is almost the only choice. With this signing model, grub2
could be signed by the key owned by the end users without the limit by
Microsoft's signing policy.

A complete verification flow with Mok secure boot looks like this:
UEFI BIOS (UEFI secure boot enabled) ->
  shim (verified by DB) ->
    grub2 (verified by shim with shim-managed certs) ->
      kernel (verified by grub2 with shim-managed certs)

Note:
If user doesn't needs to use the default Microsoft's key in order to
enable UEFI secure boot, Mok Secure Boot feature could be ignored. Just use
the secret key owned by user to sign grub2 and kernel. In this case, shim is
not required.

Limit
-----
The 32-bit Mok Secure Boot is not validated. In other words, loading 32-bit
shim, Mok manager, grub2 and kernel is not supported.

Build Project With This Feature
===============================

This template (feature/mok-secure-boot) is based on feature/uefi-secure-boot,
so it is not required to explicitly specify
--with-template=feature/uefi-secure-boot in the project configuration if this
template is used.

Key Management
==============

Sample keys
-----------
This template (feature/mok-secure-boot), by default, use the sample keys
generated by Wind River for signing and verifing images for test, development
and demonstration. Please ensure you know what your risk is to use them in
your product.

The sample keys are centrally placed under
layers/wrlabs-integration/secure-environment/file/mok_sb_keys.
This template uses the following key pair:

  * shim_cert.pem
    The X509 certificate embedded in shim, used to verify the images either
    directly or indirectly loaded by shim.

  * shim_cert.key
    The private key corresponding to shim_cert.pem, used to sign the images
    either directly or indirectly loaded by shim.

  * vendor_cert.pem
    Used in the same way as shim_cert.pem. In addition, vendor certificate
    is the switch to enable shim verification protocol, which facilitates
    the verification for kernel image.

  * vendor_cert.key
    The private key corresponding to vendor_cert.pem, Same fuction as
    shim_cert.key.

  * vendor_dbx
    This directory contains any number of X509 certificate embedded in shim,
    used to blacklist the revoked certificates.

User Keys
---------
Refer to feature/user-key-store for the details about how to generate/use the
keys owned by the user.

Automatic Key Provision
-----------------------
Refer to the cognominal section in feature/uefi-secure-boot/README. Mok Secure
Boot is on top of UEFI Secure Boot so it is still necessary to set up the
environment for UEFI Secure Boot.

mokutil and Mok Manager
-----------------------
mokutil is a tool to import or delete the machines owner keys (MOK) stored in
the database of shim. mokutil creates the requests and Mok manager will be
automatically launched by shim as long as it detects the pending requests.
The physical present user will be prompted to run the operations corresponding
to the requests. Note the operation is required to be authenticated by Mok
management password set by mokutil.

Refer to mokutil man page for the detailed usages. To show mokutil man page,
run the following command:

$ cd $project
$ export MANPATH=bitbake_build/tmp/work/corei7-64-wrs-linux/mokutil/0.3.*/packages-split/mokutil-doc/usr/share:$MANPATH
$ man mokutil

Mok Management Password
~~~~~~~~~~~~~~~~~~~~~~~
Mok management password is the authentication information to allow Mok manager
to grant the request regarding of MOK management. To set the password, run
mokutil with the option --password. In addition, there are 4 input methods to
provide the password. By default, mokutil prompts the user to input the
password and then wraps the password to sha256 password hash. For other 3
methods, refer to the uses of option --hash-file, --root-pw and --simple-hash.

Enroll the MOK
~~~~~~~~~~~~~~
Here is an example showing how to enroll a DER formatted X509 certificate to
the database of shim.

# mokutil --import <cert.cer>

where <cert.cer> is the MOK corresponding to the certificate associating with
the private key used to sign either grub2 or kernel.

To convert a PEM, for exmaple, the shim_cert.pem, to a DER formatted X509
certificate, type the command:
$ openssl x509 -in shim_cert.pem -inform PEM -out shim_cert.cer -outform DER 

List the enrollment requests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The several enrollment requests can be submitted before system reboot. Run the
following command to check all enrollment requests.

# mokutil --list-new

Revoke the enrollment requests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Note the revocation operation will remove all enrollment requests.

# mokutil --revoke-import

Test the MOK
~~~~~~~~~~~~
If you cannot confirm whether a certificate has been enrolled or not, type the
following command for a check:

# mokutil --test-key <cert.cer>

Delete the MOK
~~~~~~~~~~~~~~
Removing an useless MOK is also supported.

# mokutil --delete <cert.cer>

Refer to the options --list-delete and --revoke-delete to list and revoke the
MOKs.

Reset MOKs
~~~~~~~~~~
This request will clear all enrolled MOKs.

# mokutil --reset

Disable/Enable Mok Secure Boot
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Mok Secure Boot can be enabled or disabled regardless of the setting of UEFI
Secure Boot.

# mokutil --disable-validation	// disable Mok Secure Boot
# mokutil --enable-validation	// dnable Mok Secure Boot

Note that Mok Secure Boot is based on UEFI Secure Boot. If UEFI Secure Boot
is disabled, Mok Secure Boot will be automatically inactive. Type the
following command to check the status of UEFI Secure Boot.

# mokutil --sb-state

Others
~~~~~~
Refer to the options --import-hash and --delete-hash to manage hash-based
signature. The options --pk, --kek, --db and --dbx are useful to check
the content of the policy objects used in UEFI Secure Boot.

Manage blacklist
~~~~~~~~~~~~~~~~
All above mentioned are talking MOK which is acting as whitelist to
authenticate the verified image to launch. Actually, there is a contrary
policy object called MOKX, acting as blacklist to deny the untrusted
image to launch. Also, MOKX as blacklist is handled by shim prior to MOK
as whitelist.

For the management of blacklist, add the option --mokx with the following
options to change the operation target from MOK to the following options.

--list-enrolled
--test-key
--list-new
--list-delete
--import
--delete
--import-hash
--delete-hash
--reset
--revoke-import
--revoke-delete

Kernel Verification
===================

When grub2 loads kernel image with the chainloader command, if both UEFI Secure
Boot and Mok Secure Boot are already enabled, the UEFI BIOS will validate the
kernel image firstly. If the kernel image is not signed with the private key
corresponding to one of certificates enrolled in DB and not in DBX, then grub2
will instead employ the verification protocol installed by shim to validate
the kernel image signed with machine owner key, shim certificate or vendor
certificate. The benefit of this behavior allows the end user to regulate the
secure boot even without the ownership of DB.

By default, the build system will use shim certificate to automatically sign
the kernel image during the build. Therefore, the kernel image in RPM package,
$project/export/dist/boot/bzImage file and $project/export/images/bzImage* are
all signed.

Manually sign kernel image
--------------------------
Refer to the cognominal section in feature/uefi-secure-boot/README. Note that
machine owner key, shim certificate or vendor certificate can be used for
<key> and <cert> in the scenario of Mok Secure Boot.

Boot Menu Entry in grub.cfg
---------------------------
Refer to the cognominal section in feature/uefi-secure-boot/README.

Handle Mok Secure Boot Failure
==============================

If the grub2 is not signed or signed with an unauthorized certificate, the
shim will prompt the end user a UI called Mok manager to guide the user to
enroll the certificate or hash of the image.

The policy of the selection between digest and certificate for next step is
decided by whether the unauthorized grub2 image is signed or not.

If the grub2 image is not signed at all, you have to always select the
calculation of the digest for grubx64.efi file. Note that once the grubx64.efi
is replaced and its digest is changed, you have to relaunch the Mok manager
to enroll the hash of the grub2 image.

If the grub2 image is signed by an unauthorized certificate, enrolling the
signing certificate is the preferred way. Copy the signing certificate to
the boot drive and then select the cetificate in Mok manager. Note that
the certificate for the selection must be DER formatted.

If doing so, the unauthorized grub2 will be verified successfully after
exiting Mok Manager.
