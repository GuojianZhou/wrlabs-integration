#/bin/bash
export LANG=C

debug() {
        $debugging && echo >&2 "$@"
}

usage() {
    echo >&2 "usage: ${0##*/} [-d] [-k <#the path of private key>] [-i <#the files install directory>]"
    echo >&2 "This script will try to do the IMA signing of the files installed in the install directry"
    echo >&2 "specified by '-i' and then created a runnable shell script file which can be copied to your"
    echo >&2 "to your target and then run it directly. It will deploy all of the files with IMA signed on"
    echo >&2 "to this target as the same path as they in the directory specified by '-i' option."
    echo >&2 "   -d set +x."
    echo >&2 "   -k the path of private key file"
    echo >&2 "   -i the application install directory, all files under this directory will be packaged."
    echo >&2 "   -o The output directory, where the package is generated."
    exit 1
}

# Are we debugging?
debugging=false
export debugging

export silence=">/dev/null 2>&1"

sig_lists=""
install_dir=""
key=""
while getopts "dhi:k:o:s:" FLAG; do
    case $FLAG in
        d)      if $debugging; then set -x; fi; debugging=true;;
        i)      install_dir=$OPTARG;;
        o)      destdir=$OPTARG;;
        k)      key=$OPTARG;;
	s)	sdk=$OPTARG;;
        h)      usage;;
        \?)     usage;;
    esac
done

shift $((OPTIND - 1))

if [ ! -d "$install_dir" ]; then
	echo "you must specify a directory where the files installed."
        usage
fi

if [ ! -f "$key" ]; then
    echo "you must specify a private key to do the IMA signing."
    usage
else
    file $key | grep "private key" >/dev/null 2>&1
    if [ $? != 0 ]; then
	echo "The key is not an valid file, please specify a valid key."
	usage
    fi
fi

if [ ! -f "`which base64`" ]; then
	echo "Error: Can not find the command base64"
	exit 1
fi

if [ ! -f "`which evmctl`" ]; then
	echo "Error: Can not find the command evmctl"
	exit 1
fi

do_package(){
	dir=$1	
	pkgname=`basename $dir`
	cd $dir $silence
	tmpdir=`mktemp -d`
	tarball="${tmpdir}/${pkgname}.tar.gz"
	tar czfp $tarball * >/dev/null 2>&1
	cd - >/dev/null 2>&1
	echo $tarball
}

do_sig(){
	dir=$1
	key=`realpath $2`
	OLDIFS=$IFS
	IFS=":"
	basedir=`basename $dir`
	cmd="evmctl ima_sign --hashalgo sha256 --sigfile --key $key"
	cd $dir
	for filename in `find -type f -printf "%p:"`; do
		debug "signing file $filename......"
		evmctl ima_sign -n --hashalgo sha256 --sigfile --key $key $filename >/dev/null 2>&1
		abs_filename=`echo $filename | sed 's/^\.//'`
		sig_lists="`base64 ${filename}.sig`|${abs_filename}&${sig_lists}"
		rm -rf ${filename}.sig
	done
	cd - >/dev/null 2>&1
	IFS=$OLDIFS
}

do_script(){
	dir=$1
	tarball=$2
	basedir=`basename $dir`
	if [ -z "$destdir" ]; then
		destdir="."
	fi
 	cat >$destdir/${basedir}.sh  <<EOF
#/bin/bash
sig_lists="$sig_lists"

untar_payload(){
	match=\$(grep --text --line-number '^PAYLOAD:$' \$0 | cut -d ':' -f 1)
	payload_start=\$((match + 1))
	tail -n +\$payload_start \$0 | tar -xzvf - -C /
}

verify_root_user()
{
    if [ "\$EUID" -ne 0 ]; then
        return 1
    fi
    return 0
}

do_sign(){
	saved_IFS="\$IFS"
	IFS="&"
	siglists="\$1"
	for entry in \${siglists}; do
		IFS="|"
		
		tokens=""
		for token in \$entry; do
			tokens="\$tokens\$token|"
		done

		for sig in \$tokens;do
			break
		done

		IFS="\$saved_IFS"
		
		f="\$token"

		setfattr -n security.ima -v "0s\$sig" "\$f" || {
			err=\$?
			echo "Unable to set up security.ima for \$f (err: \$err)"
		}
		
		IFS="&"

	done
}
verify_root_user
if [ \$? != 0 ]; then
        echo "root right is required to run this script!"
        exit 1
fi

untar_payload
do_sign "\$sig_lists"

exit 0
EOF
	chmod +x $destdir/${basedir}.sh
	echo "PAYLOAD:" >>$destdir/${basedir}.sh
	cat $tarball >>$destdir/${basedir}.sh
	echo "====================================================================="
	echo "The programs have been IMA signed and packaged into ${basedir}.sh"		  
	echo "Please copy it on to your target and run: "
	echo "#sh ${basedir}.sh"
	echo "to deploy your programs on that target."
	echo "====================================================================="
}

do_sig $install_dir $key

tarball=`do_package $install_dir`
cp $tarball ./
do_script $install_dir $tarball

