From e9c34ddd4e64cfe98970ae76810b20dd9375dadc Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Mon, 29 Sep 2014 17:30:43 +0800
Subject: [PATCH] Add the support for fsl 1588

Based on patch ptpd-2.2.0-etsec.patch from
LS1021A-SDK-V1.1-ARM-SOURCE-20140815-yocto.iso.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 src/Makefile.am |    6 ++
 src/dep/net.c   |   76 +++++++++++++++++++++++++++++++
 src/dep/sys.c   |   30 ++++++++++++
 src/fsl_1588.c  |  134 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/fsl_1588.h  |   34 ++++++++++++++
 src/protocol.c  |   71 +++++++++++++++++++++++++++++
 6 files changed, 350 insertions(+), 1 deletion(-)
 create mode 100644 src/fsl_1588.c
 create mode 100644 src/fsl_1588.h

--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -82,6 +82,12 @@ else
 ptpd2_SOURCES +=dep/eventtimer_itimer.c
 endif
 
+#FSL_1588
+AM_CFLAGS += -DFSL_1588
+ptpd2_SOURCES += fsl_1588.c
+ptpd2_SOURCES += fsl_1588.h
+#FSL_1588
+
 CSCOPE = cscope
 GTAGS = gtags
 DOXYGEN = doxygen
--- a/src/dep/net.c
+++ b/src/dep/net.c
@@ -55,6 +55,9 @@
  */
 
 #include "../ptpd.h"
+#if defined(FSL_1588)
+#include "../fsl_1588.h"
+#endif
 
 #ifdef PTPD_PCAP
 #ifdef HAVE_PCAP_PCAP_H
@@ -629,6 +632,15 @@ getTxTimestamp(NetPath* netPath,TimeInte
 	struct timeval timeOut = {0,0};
 	int val = 1;
 	int i = 0;
+
+#if defined(FSL_1588)
+	usleep(1);//important
+	length = hwtstamp_tx_get(G_ptpClock->msgIbuf, timeStamp, netPath);
+	if (length > 0)
+		return TRUE;
+	else
+		return FALSE;
+#else
 	if(netPath->txTimestampFailure)
 		goto failure;
 
@@ -687,6 +699,7 @@ failure:
 	}
 
 	return FALSE;
+#endif
 }
 #endif /* SO_TIMESTAMPING */
 
@@ -704,6 +717,17 @@ netInitTimestamping(NetPath * netPath, c
 
 	int val = 1;
 	Boolean result = TRUE;
+#if defined(FSL_1588)
+	int so_timestamping_flags = 0;
+
+	so_timestamping_flags = SOF_TIMESTAMPING_RX_HARDWARE | SOF_TIMESTAMPING_RAW_HARDWARE;
+	if (setsockopt(netPath->eventSock, SOL_SOCKET, SO_TIMESTAMPING, &so_timestamping_flags, sizeof(so_timestamping_flags)) < 0
+		|| setsockopt(netPath->generalSock, SOL_SOCKET, SO_TIMESTAMPING, &so_timestamping_flags, sizeof(so_timestamping_flags)) < 0) {
+		printf("netInitTimestamping: failed to enable SO_TIMESTAMPING");
+		result = FALSE;
+	}
+
+#else	/* FSL_1588 */
 #if defined(SO_TIMESTAMPING) && defined(SO_TIMESTAMPNS)/* Linux - current API */
 	DBG("netInitTimestamping: trying to use SO_TIMESTAMPING\n");
 	val = SOF_TIMESTAMPING_TX_SOFTWARE |
@@ -774,6 +798,7 @@ netInitTimestamping(NetPath * netPath, c
 #else
 	result = FALSE;
 #endif
+#endif	/* FSL_1588 */
 			
 /* fallback method */
 #if defined(SO_TIMESTAMP) /* Linux, Apple, FreeBSD */
@@ -992,6 +1017,10 @@ netInit(NetPath * netPath, RunTimeOpts *
 	if( getInterfaceInfo(rtOpts->ifaceName, &netPath->interfaceInfo)!= 1)
 		return FALSE;
 
+#if defined(FSL_1588)
+	memcpy(fsl_1588_if_name, rtOpts->ifaceName, IFACE_NAME_LENGTH);
+#endif
+
 	/* No HW address, we'll use the protocol address to form interfaceID -> clockID */
 	if( !netPath->interfaceInfo.hasHwAddress && netPath->interfaceInfo.hasAfAddress ) {
 		uint32_t addr = ((struct sockaddr_in*)&(netPath->interfaceInfo.afAddress))->sin_addr.s_addr;
@@ -1108,6 +1137,9 @@ netInit(NetPath * netPath, RunTimeOpts *
 
 		DBG("Local IP address used : %s \n", inet_ntoa(netPath->interfaceAddr));
 
+#if defined(FSL_1588)
+		hwtstamp_tx_ctl(&ptpClock->netPath, FALSE);//HWTSTAMP_TX_OFF
+#endif
 		temp = 1;			/* allow address reuse */
 		if (setsockopt(netPath->eventSock, SOL_SOCKET, SO_REUSEADDR, 
 			       &temp, sizeof(int)) < 0
@@ -1439,17 +1471,25 @@ netRecvEvent(Octet * buf, TimeInternal *
 
 	union {
 		struct cmsghdr cm;
+#if defined(FSL_1588)
+		char	control[3*CMSG_SPACE(sizeof(struct timeval))];
+#else
 		char	control[256];
+#endif
 	}     cmsg_un;
 
 	struct cmsghdr *cmsg;
 
+#if defined(FSL_1588)
+	struct timespec * ts;
+#else	/*FSL_1588 */
 #if defined(SO_TIMESTAMPNS) || defined(SO_TIMESTAMPING)
 	struct timespec * ts;
 #elif defined(SO_BINTIME)
 	struct bintime * bt;
 	struct timespec ts;
 #endif
+#endif	/*FSL_1588 */
 	
 #if defined(SO_TIMESTAMP)
 	struct timeval * tv;
@@ -1539,6 +1579,27 @@ netRecvEvent(Octet * buf, TimeInternal *
 
 
 			if (cmsg->cmsg_level == SOL_SOCKET) {
+#if defined(FSL_1588)
+			if(cmsg->cmsg_type == SCM_TIMESTAMPING) {
+				ts = (struct timespec *)CMSG_DATA(cmsg);
+				//printf("SO_TIMESTAMPING ");
+				//printf("SW %ld.%09ld ",
+				//       (long)ts->tv_sec,
+				//      (long)ts->tv_nsec);
+				ts++;
+				//printf("HW transformed %ld.%09ld ",
+				//       (long)ts->tv_sec,
+				//       (long)ts->tv_nsec);
+				ts++;
+				//printf("HW raw %ld.%09ld\n",
+				//       (long)ts->tv_sec,
+				//       (long)ts->tv_nsec);
+				time->seconds = ts->tv_sec;
+				time->nanoseconds = ts->tv_nsec;
+				timestampValid = TRUE;
+				break;
+			}
+#else	/* FSL_1588 */
 #if defined(SO_TIMESTAMPING) && defined(SO_TIMESTAMPNS)
 				if(cmsg->cmsg_type == SO_TIMESTAMPING || 
 				    cmsg->cmsg_type == SO_TIMESTAMPNS) {
@@ -1573,6 +1634,7 @@ netRecvEvent(Octet * buf, TimeInternal *
 					break;
 				}
 #endif
+#endif	/* FSL_1588 */
 			
 #if defined(SO_TIMESTAMP)
 				if(cmsg->cmsg_type == SCM_TIMESTAMP) {
@@ -1780,6 +1842,9 @@ netSendEvent(Octet * buf, UInteger16 len
 {
 	ssize_t ret;
 	struct sockaddr_in addr;
+#if defined(FSL_1588)
+	hwtstamp_tx_ctl(netPath, TRUE);//HWTSTAMP_TX_ON
+#endif
 
 	addr.sin_family = AF_INET;
 	addr.sin_port = htons(PTP_EVENT_PORT);
@@ -1895,8 +1960,10 @@ netSendEvent(Octet * buf, UInteger16 len
 					
 					netPath->txTimestampFailure = TRUE;
 
+#if !defined(FSL_1588)
 					/* Try re-enabling MULTICAST_LOOP */
 					netSetMulticastLoopback(netPath, TRUE);
+#endif
 				}
 			}
 #endif /* SO_TIMESTAMPING */
@@ -1914,6 +1981,9 @@ netSendGeneral(Octet * buf, UInteger16 l
 {
 	ssize_t ret;
 	struct sockaddr_in addr;
+#if defined(FSL_1588)
+	hwtstamp_tx_ctl(netPath, FALSE);//HWTSTAMP_TX_OFF
+#endif
 
 	addr.sin_family = AF_INET;
 	addr.sin_port = htons(PTP_GENERAL_PORT);
@@ -1985,6 +2055,9 @@ netSendPeerGeneral(Octet * buf, UInteger
 
 	ssize_t ret;
 	struct sockaddr_in addr;
+#if defined(FSL_1588)
+	hwtstamp_tx_ctl(netPath, FALSE);//HWTSTAMP_TX_OFF
+#endif
 
 	addr.sin_family = AF_INET;
 	addr.sin_port = htons(PTP_GENERAL_PORT);
@@ -2050,6 +2123,9 @@ netSendPeerEvent(Octet * buf, UInteger16
 {
 	ssize_t ret;
 	struct sockaddr_in addr;
+#if defined(FSL_1588)
+	hwtstamp_tx_ctl(netPath, TRUE);//HWTSTAMP_TX_ON
+#endif
 
 	addr.sin_family = AF_INET;
 	addr.sin_port = htons(PTP_EVENT_PORT);
--- a/src/dep/sys.c
+++ b/src/dep/sys.c
@@ -86,6 +86,10 @@ char *dump_TimeInternal(const TimeIntern
 	return buf;
 }
 
+#if defined(FSL_1588)
+#include "../fsl_1588.h"
+#endif
+
 
 /*
  displays 2 timestamps and their strings in sequence, and the difference between then
@@ -345,7 +349,14 @@ int writeMessage(FILE* destination, int
 		 * it also can cause problems in nested debug statements (which are solved by turning the signal
 		 *  handling synchronous, and not calling this function inside asycnhronous signal processing)
 		 */
+#if defined(FSL_1588)
+		struct timespec tp;
+		clock_gettime(clkid,&tp);
+		now.tv_sec = tp.tv_sec;
+		now.tv_usec = tp.tv_nsec / 1000;
+#else
 		gettimeofday(&now, 0);
+#endif
 		strftime(time_str, MAXTIMESTR, "%F %X", localtime((time_t*)&now.tv_sec));
 		fprintf(destination, "%s.%06d ", time_str, (int)now.tv_usec  );
 		fprintf(destination,PTPD_PROGNAME"[%d].%s (%-9s ",
@@ -1352,6 +1363,15 @@ getTime(TimeInternal * time)
 {
 #if defined(_POSIX_TIMERS) && (_POSIX_TIMERS > 0)
 
+#if defined(FSL_1588)
+	struct timespec tp;
+	if (clock_gettime(clkid, &tp)){
+		perror("clock_gettime");
+		exit(0);
+	}
+	time->seconds = tp.tv_sec;
+	time->nanoseconds = tp.tv_nsec;
+#else
 	struct timespec tp;
 	if (clock_gettime(CLOCK_REALTIME, &tp) < 0) {
 		PERROR("clock_gettime() failed, exiting.");
@@ -1360,6 +1380,7 @@ getTime(TimeInternal * time)
 	time->seconds = tp.tv_sec;
 	time->nanoseconds = tp.tv_nsec;
 
+#endif/* FSL_1588 */
 #else
 
 	struct timeval tv;
@@ -1417,10 +1438,15 @@ setTime(TimeInternal * time)
 
 #if defined(_POSIX_TIMERS) && (_POSIX_TIMERS > 0)
 
+#if defined(FSL_1588)
+	if (clock_settime(clkid, &tp))
+			perror("clock_settime");
+#else
 	if (clock_settime(CLOCK_REALTIME, &tp) < 0) {
 		PERROR("Could not set system time");
 		return;
 	}
+#endif
 
 #else
 
@@ -1795,7 +1821,11 @@ adjFreq(double adj)
 #endif /* HAVE_STRUCT_TIMEX_TICK */
 	DBG2("        adj is %.09f;  t freq is %d       (float: %.09f)\n", adj, t.freq,  dFreq);
 	
+#if defined(FSL_1588)
+	return !clock_adjtime(clkid, &t);
+#else
 	return !adjtimex(&t);
+#endif
 }
 
 
--- /dev/null
+++ b/src/fsl_1588.c
@@ -0,0 +1,134 @@
+#include "fsl_1588.h"
+
+/*************************PTP Clock*************************/
+clockid_t get_clockid(int fd)
+{
+#define CLOCKFD 3
+#define FD_TO_CLOCKID(fd)	((~(clockid_t) (fd) << 3) | CLOCKFD)
+	return FD_TO_CLOCKID(fd);
+}
+
+/* When glibc offers the syscall, this will go away. */
+#include <sys/syscall.h>
+int clock_adjtime(clockid_t id, struct timex *tx)
+{
+	return syscall(__NR_clock_adjtime, id, tx);
+}
+
+
+
+
+
+/*************************HW Timestamp*************************/
+//select HWTSTAMP_TX_ON or HWTSTAMP_TX_OFF
+void hwtstamp_tx_ctl(NetPath * netPath, Boolean enable)
+{
+	struct ifreq hwtstamp;
+	struct hwtstamp_config hwconfig;
+
+	memset(&hwtstamp, 0, sizeof(hwtstamp));
+	strncpy(hwtstamp.ifr_name, fsl_1588_if_name, sizeof(hwtstamp.ifr_name));
+	hwtstamp.ifr_data = (void *)&hwconfig;
+	memset(&hwconfig, 0, sizeof(hwconfig));
+	hwconfig.tx_type =
+		enable ?
+		HWTSTAMP_TX_ON : HWTSTAMP_TX_OFF;
+	hwconfig.rx_filter = HWTSTAMP_FILTER_PTP_V1_L4_SYNC;
+	if (ioctl(netPath->eventSock, SIOCSHWTSTAMP, &hwtstamp) < 0
+		|| ioctl(netPath->generalSock, SIOCSHWTSTAMP, &hwtstamp) < 0)
+			printf("error:hwtstamp_tx_ctl\n");
+}
+
+//select SOF_TIMESTAMPING_RX_HARDWARE or SOF_TIMESTAMPING_TX_HARDWARE
+void hwtstamp_rx_init(NetPath * netPath, Boolean isRecv)
+{
+	int so_timestamping_flags = 0;
+
+	so_timestamping_flags = isRecv ? SOF_TIMESTAMPING_RX_HARDWARE : SOF_TIMESTAMPING_TX_HARDWARE;
+	so_timestamping_flags = so_timestamping_flags | SOF_TIMESTAMPING_RAW_HARDWARE;
+
+	if (setsockopt(netPath->eventSock, SOL_SOCKET, SO_TIMESTAMPING, &so_timestamping_flags, sizeof(so_timestamping_flags)) < 0
+		|| setsockopt(netPath->generalSock, SOL_SOCKET, SO_TIMESTAMPING, &so_timestamping_flags, sizeof(so_timestamping_flags)) < 0) {
+		printf("error:hwtstamp_rx_init\n");
+	}
+}
+
+ssize_t
+hwtstamp_tx_get(Octet * buf, TimeInternal * time, NetPath * netPath)
+{
+	ssize_t ret;
+	struct msghdr msg;
+	struct iovec vec[1];
+	struct sockaddr_in from_addr;
+	fd_set readfds;
+
+	union {
+		struct cmsghdr cm;
+		char	control[3*CMSG_SPACE(sizeof(struct timeval))];
+	}     cmsg_un;
+
+	struct cmsghdr *cmsg;
+	struct timespec * ts;
+
+	vec[0].iov_base = buf;
+	vec[0].iov_len = PACKET_SIZE;
+
+	memset(&msg, 0, sizeof(msg));
+	memset(&from_addr, 0, sizeof(from_addr));
+	memset(buf, 0, PACKET_SIZE);
+	memset(&cmsg_un, 0, sizeof(cmsg_un));
+
+	msg.msg_name = (caddr_t)&from_addr;
+	msg.msg_namelen = sizeof(from_addr);
+	msg.msg_iov = vec;
+	msg.msg_iovlen = 1;
+	msg.msg_control = cmsg_un.control;
+	msg.msg_controllen = sizeof(cmsg_un.control);
+	msg.msg_flags = 0;
+
+	FD_ZERO(&readfds);
+	FD_SET(netPath->eventSock, &readfds);
+	FD_SET(netPath->generalSock, &readfds);
+	if (netSelect(0, netPath, &readfds) <= 0)
+		return 0;
+
+	ret = recvmsg(netPath->eventSock, &msg, MSG_ERRQUEUE);
+
+	if (ret <= 0) {
+	printf("error:hwtstamp_tx_get\n");
+		if (errno == EAGAIN || errno == EINTR)
+			return 0;
+		return ret;
+	}
+
+	if (msg.msg_controllen <= 0) {
+		ERROR("received short ancillary data (%ld/%ld)\n",
+		    (long)msg.msg_controllen, (long)sizeof(cmsg_un.control));
+		return 0;
+	}
+
+	for (cmsg = CMSG_FIRSTHDR(&msg); cmsg != NULL;
+	     cmsg = CMSG_NXTHDR(&msg, cmsg)) {
+		if (cmsg->cmsg_level == SOL_SOCKET) {
+			if(cmsg->cmsg_type == SCM_TIMESTAMPING) {
+				ts = (struct timespec *)CMSG_DATA(cmsg);
+				//printf("SO_TIMESTAMPING ");
+				//printf("SW %ld.%09ld ",
+				//       (long)ts->tv_sec,
+				//       (long)ts->tv_nsec);
+				ts++;
+				//printf("HW transformed %ld.%09ld ",
+				//       (long)ts->tv_sec,
+				//       (long)ts->tv_nsec);
+				ts++;
+				//printf("HW raw %ld.%09ld\n",
+				//       (long)ts->tv_sec,
+				//       (long)ts->tv_nsec);
+				time->seconds = ts->tv_sec;
+				time->nanoseconds = ts->tv_nsec;
+				break;
+			}
+		}
+	}
+	return ret;
+}
--- /dev/null
+++ b/src/fsl_1588.h
@@ -0,0 +1,34 @@
+#include "ptpd.h"
+#include <linux/net_tstamp.h>
+/*************************MACROS*************************/
+#ifndef SO_TIMESTAMPING
+# define SO_TIMESTAMPING         37
+# define SCM_TIMESTAMPING        SO_TIMESTAMPING
+#endif
+
+#ifndef SIOCSHWTSTAMP
+# define SIOCSHWTSTAMP 0x89b0
+#endif
+
+#ifndef CLOCK_INVALID
+#define CLOCK_INVALID -1
+#endif
+
+
+
+/*************************VARIABLES*************************/
+clockid_t clkid;
+char fsl_1588_if_name[IFACE_NAME_LENGTH];
+
+
+
+
+
+
+/*************************FUNCTIONS*************************/
+clockid_t get_clockid(int fd);
+int clock_adjtime(clockid_t id, struct timex *tx);
+
+void hwtstamp_tx_ctl(NetPath * netPath, Boolean enable);
+void hwtstamp_rx_init(NetPath * netPath, Boolean isRecv);
+ssize_t hwtstamp_tx_get(Octet * buf, TimeInternal * time, NetPath * netPath);
--- a/src/protocol.c
+++ b/src/protocol.c
@@ -52,6 +52,9 @@
  */
 
 #include "ptpd.h"
+#if defined(FSL_1588)
+#include "fsl_1588.h"
+#endif
 
 Boolean doInit(RunTimeOpts*,PtpClock*);
 static void doState(const RunTimeOpts*,PtpClock*);
@@ -201,6 +204,22 @@ void addForeign(Octet*,MsgHeader*,PtpClo
 void 
 protocol(RunTimeOpts *rtOpts, PtpClock *ptpClock)
 {
+#if defined(FSL_1588)
+	char device[]="/dev/ptp0";
+	int fd;
+	fd = open(device, O_RDWR);
+	if (fd < 0) {
+		fprintf(stderr, "opening %s: %s\n", device, strerror(errno));
+		return;
+	}
+
+	clkid = get_clockid(fd);
+
+	if (CLOCK_INVALID == clkid) {
+		fprintf(stderr, "failed to read clock id\n");
+		return;
+	}
+#endif
 	DBG("event POWERUP\n");
 
 	timerStart(&ptpClock->timers[TIMINGDOMAIN_UPDATE_TIMER],timingDomain.updateInterval);
@@ -680,9 +699,23 @@ doInit(RunTimeOpts *rtOpts, PtpClock *pt
 }
 
 /* handle actions and events for 'port_state' */
+#if defined(FSL_1588)
+TimeInternal issueSyncTime = { 0, 0 };
+TimeInternal issueDelayReqTime = { 0, 0 };
+TimeInternal issuePDelayReqTime = { 0, 0 };
+TimeInternal issuePDelayRespTime = { 0, 0 };
+int issueSyncFlag = 0;
+int issueDelayReqFlag = 0;
+int issuePDelayReqFlag = 0;
+int issuePDelayRespFlag = 0;
+#endif
+
 static void 
 doState(const RunTimeOpts *rtOpts, PtpClock *ptpClock)
 {
+#if defined(FSL_1588)
+	ssize_t length = 0;
+#endif
 	UInteger8 state;
 	
 	ptpClock->message_activity = FALSE;
@@ -860,7 +893,13 @@ doState(const RunTimeOpts *rtOpts, PtpCl
 				if(!rtOpts->unicastNegotiation || 
 					(ptpClock->parentGrants && 
 					    ptpClock->parentGrants->grantData[DELAY_RESP].granted)) {
+#if defined(FSL_1588)
+						hwtstamp_rx_init(&ptpClock->netPath, FALSE);//SOF_TIMESTAMPING_TX_HARDWARE
+						issueDelayReq(rtOpts,ptpClock);
+						hwtstamp_rx_init(&ptpClock->netPath, TRUE);//SOF_TIMESTAMPING_RX_HARDWARE
+#else
 						issueDelayReq(rtOpts,ptpClock);
+#endif
 				}
 			}
 		} else if (ptpClock->delayMechanism == P2P) {
@@ -869,7 +908,13 @@ doState(const RunTimeOpts *rtOpts, PtpCl
 				/* if unicast negotiation is enabled, only request if granted */
 				if(!rtOpts->unicastNegotiation || 
 					( ptpClock->peerGrants.grantData[PDELAY_RESP].granted)) {
+#if defined(FSL_1588)
+					    hwtstamp_rx_init(&ptpClock->netPath, FALSE);//SOF_TIMESTAMPING_TX_HARDWARE
+						issuePdelayReq(rtOpts,ptpClock);
+						hwtstamp_rx_init(&ptpClock->netPath, TRUE);//SOF_TIMESTAMPING_RX_HARDWARE
+#else
 					    issuePdelayReq(rtOpts,ptpClock);
+#endif
 				}
 			}
 
@@ -1007,11 +1052,16 @@ doState(const RunTimeOpts *rtOpts, PtpCl
 				/* if unicast negotiation is enabled, only request if granted */
 				if(!rtOpts->unicastNegotiation || 
 					( ptpClock->peerGrants.grantData[PDELAY_RESP].granted)) {
+#if defined(FSL_1588)
+					    hwtstamp_rx_init(&ptpClock->netPath, FALSE);//SOF_TIMESTAMPING_TX_HARDWARE
+					    issuePdelayReq(rtOpts,ptpClock);
+					    hwtstamp_rx_init(&ptpClock->netPath, TRUE);//SOF_TIMESTAMPING_RX_HARDWARE
+#else
 					    issuePdelayReq(rtOpts,ptpClock);
+#endif
 				}
 			}
 		}
-
 		if(rtOpts->do_IGMP_refresh &&
 		    rtOpts->transport == UDP_IPV4 &&
 		    rtOpts->ipMode != IPMODE_UNICAST &&
@@ -1035,7 +1085,13 @@ doState(const RunTimeOpts *rtOpts, PtpCl
 					pow(2,ptpClock->logSyncInterval));
 			}
 
+#if defined(FSL_1588)
+			hwtstamp_rx_init(&ptpClock->netPath, FALSE);//SOF_TIMESTAMPING_TX_HARDWARE
+			issueSync(rtOpts, ptpClock);
+			hwtstamp_rx_init(&ptpClock->netPath, TRUE);//SOF_TIMESTAMPING_RX_HARDWARE
+#else
 			issueSync(rtOpts, ptpClock);
+#endif
 		}
 		if(!ptpClock->warnedUnicastCapacity) {
 		    if(ptpClock->slaveCount >= UNICAST_MAX_DESTINATIONS || 
@@ -1343,6 +1399,9 @@ handle(const RunTimeOpts *rtOpts, PtpClo
     TimeInternal timeStamp = { 0, 0 };
     fd_set readfds;
 
+#if defined(FSL_1588)
+	hwtstamp_tx_ctl(&ptpClock->netPath, FALSE);//HWTSTAMP_TX_OFF
+#endif
     FD_ZERO(&readfds);
     if (!ptpClock->message_activity) {
 	ret = netSelect(NULL, &ptpClock->netPath, &readfds);
@@ -2359,8 +2418,15 @@ handlePdelayReq(MsgHeader *header, ssize
 				ptpClock->counters.pdelayReqMessagesReceived++;
 				msgUnpackHeader(ptpClock->msgIbuf,
 						&ptpClock->PdelayReqHeader);
+#if defined(FSL_1588)
+				hwtstamp_rx_init(&ptpClock->netPath, FALSE);//SOF_TIMESTAMPING_TX_HARDWARE
+				issuePdelayResp(tint, header, sourceAddress, rtOpts,
+						ptpClock);	
+				hwtstamp_rx_init(&ptpClock->netPath, TRUE);//SOF_TIMESTAMPING_RX_HARDWARE
+#else
 				issuePdelayResp(tint, header, sourceAddress, rtOpts,
 						ptpClock);	
+#endif
 				break;
 			}
 		default:
@@ -2400,6 +2466,9 @@ handlePdelayResp(const MsgHeader *header
 		 ssize_t length, Boolean isFromSelf, Integer32 sourceAddress, Integer32 destinationAddress,
 		 const RunTimeOpts *rtOpts, PtpClock *ptpClock)
 {
+#if defined(FSL_1588)
+	ssize_t length1 = 0;
+#endif
 	if (ptpClock->delayMechanism == P2P) {
 
 		Integer32 dst = 0;
