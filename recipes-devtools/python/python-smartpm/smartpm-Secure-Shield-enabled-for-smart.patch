From 20fb9c3d7ad110cd00e7732cab42b2967860a0bb Mon Sep 17 00:00:00 2001
From: fli <fupan.li@windriver.com>
Date: Tue, 1 Nov 2016 23:07:17 -0700
Subject: [PATCH] smartpm: Secure Shield enabled for smart

Signed-off-by: fli <fupan.li@windriver.com>
---
 smart/channels/rpm_md.py | 12 ++++++------
 smart/fetcher.py         | 41 ++++++++++++++++++++++++++++++++++-------
 2 files changed, 40 insertions(+), 13 deletions(-)

diff --git a/smart/channels/rpm_md.py b/smart/channels/rpm_md.py
index a4916a4..82b6bb3 100644
--- a/smart/channels/rpm_md.py
+++ b/smart/channels/rpm_md.py
@@ -196,17 +196,17 @@ class RPMMetaDataChannel(PackageChannel, MirrorsChannel):
                 oldinfo = self.loadMetadata(path)
             except Error:
                 pass
-        
+               
         item = fetcher.enqueue(repomd, self)
         if self._fingerprint:
             gpgitem = fetcher.enqueue(reposig, self)
         fetcher.run(progress=progress)
-
+       
         if item.getStatus() is FAILED:
             progress.add(self.getFetchSteps()-1)
             if fetcher.getCaching() is NEVER:
                 lines = [_("Failed acquiring release file for '%s':") % self,
-                         u"%s: %s" % (item.getURL(), item.getFailedReason())]
+                         u"%s: %s" % (item.getOriginalURL(), item.getFailedReason())]
                 raise Error, "\n".join(lines)
             return False
 
@@ -302,13 +302,13 @@ class RPMMetaDataChannel(PackageChannel, MirrorsChannel):
                 else:
                     iface.warning(_("Failed to download. You must fetch channel "
                         "information to acquire needed update information.\n"
-                        "%s: %s") % (uiitem.getURL(), uiitem.getFailedReason()))
+                        "%s: %s") % (uiitem.getOriginalURL(), uiitem.getFailedReason()))
         elif (item.getStatus() == SUCCEEDED and
               flitem.getStatus() == FAILED and
               fetcher.getCaching() is ALWAYS):
             iface.warning(_("Failed to download. You must fetch channel "
                             "information to acquire needed filelists.\n"
-                            "%s: %s") % (flitem.getURL(),
+                            "%s: %s") % (flitem.getOriginalURL(),
                             flitem.getFailedReason()))
             return False
         elif fetcher.getCaching() is NEVER:
@@ -317,7 +317,7 @@ class RPMMetaDataChannel(PackageChannel, MirrorsChannel):
             else:
                 faileditem = flitem
             lines = [_("Failed acquiring information for '%s':") % self,
-                       u"%s: %s" % (faileditem.getURL(),
+                       u"%s: %s" % (faileditem.getOriginalURL(),
                        faileditem.getFailedReason())]
             raise Error, "\n".join(lines)
         else:
diff --git a/smart/fetcher.py b/smart/fetcher.py
index bad12b6..97602d2 100644
--- a/smart/fetcher.py
+++ b/smart/fetcher.py
@@ -680,6 +680,21 @@ class URL(object):
         self.query = ""
 
     def set(self, url, channel):
+        self.original = url
+
+        urlroot = sysconf.get('repourlroot')
+        if urlroot:
+            repourlroot = urlroot
+        else:
+            repourlroot = "repourlroot not defined"
+
+        requestfile = ""
+        match = re.search(repourlroot + "(.*)", url)
+        if match:
+            if match.group(1):
+                requestfile = match.group(1)
+                url = repourlroot
+
         if url.startswith("/"):
             self.scheme = "file"
             rest = url
@@ -696,7 +711,7 @@ class URL(object):
             if self.path.startswith("//"):
                 self.path = self.path[1:]
             return
-        self.original = url
+        # self.original = url
 
         self.channel = channel
         baseurl = ''
@@ -711,7 +726,7 @@ class URL(object):
             self.baseurl = baseurl
 
         rooturl = os.path.dirname(self.baseurl)
-	
+
         host, rest = urllib.splithost(rest)
         user, host = urllib.splituser(host)
         if user:
@@ -731,8 +746,13 @@ class URL(object):
             fileid = open("/etc/system-id")
             systemid = fileid.readline().strip('\n')
 
-        data = urllib.urlencode({"id":systemid})
+        if requestfile != "":
+            data = urllib.urlencode({"id":systemid,"file":requestfile})
+        else:
+            data = urllib.urlencode({"id":systemid})
+
         self.query = data
+        
         opener = Opener()
         try:
             remote = opener.open(str(self))
@@ -748,7 +768,8 @@ class URL(object):
                 cached = 0
                 password_list = sysconf.get('account')
                 if password_list and password_list.has_key(alias):
-                    account = eval(password_list[alias])
+                    # account = eval(password_list[alias])
+                    account = password_list[alias]
                     username = account['user']
                     passwd = base64.b64decode(account['password'])
                 elif (not Useraccount.getUserPwd(rooturl)):
@@ -768,9 +789,14 @@ class URL(object):
             Useraccount.setUserPwd(rooturl, {'user':username, 'password':passwd})
             self.user = username
             self.passwd = passwd
-            sysconf.set('account.'+alias, '{\'user\': \''+username+'\', \'password\': \''+base64.b64encode(passwd)+'\'}')
+            # sysconf.set('account.'+alias, '{\'user\': \''+username+'\', \'password\': \''+base64.b64encode(passwd)+'\'}')
 
-            remote = opener.open(str(self))
+            try:
+                remote = opener.open(str(self))
+            except IOError, e:
+                print "Error: Network unreachable for %s." % self.original
+                exit(1)
+            
 
     def __str__(self):
         if self.scheme in Fetcher.getLocalSchemes():
@@ -1311,7 +1337,8 @@ class URLLIBHandler(FetcherHandler):
                 else:
                     partsize = 0
 
-                remote = opener.open(url.original)
+                # remote = opener.open(url.original)
+                remote = opener.open(str(url))
 
                 if (hasattr(remote, "errcode") and remote.errcode == 401):
                     remote = opener.open(str(url))
-- 
2.9.3

