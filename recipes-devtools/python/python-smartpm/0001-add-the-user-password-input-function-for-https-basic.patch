From b0f9c0ed48c0755203c7fcf9a056c40839c92930 Mon Sep 17 00:00:00 2001
From: fupan li <fupan.li@windriver.com>
Date: Thu, 28 Aug 2014 14:09:53 +0800
Subject: [PATCH] add the user:password input function for https basic
 authentication

---
 smart/channels/rpm_md.py |  14 ++---
 smart/control.py         |   6 +--
 smart/fetcher.py         | 133 ++++++++++++++++++++++++++++++++++++-----------
 smart/report.py          |   6 ++-
 4 files changed, 117 insertions(+), 42 deletions(-)

diff --git a/smart/channels/rpm_md.py b/smart/channels/rpm_md.py
index ddfed2e..a4916a4 100644
--- a/smart/channels/rpm_md.py
+++ b/smart/channels/rpm_md.py
@@ -163,7 +163,7 @@ class RPMMetaDataChannel(PackageChannel, MirrorsChannel):
     def getLocalPath(self, fetcher, url):
         from smart.fetcher import FetchItem
         mirror = fetcher.getMirrorSystem().get(url)
-        item = FetchItem(fetcher, url, mirror)
+        item = FetchItem(fetcher, url, mirror, self)
         return fetcher.getLocalPath(item)
 
     def fetch(self, fetcher, progress):
@@ -172,7 +172,7 @@ class RPMMetaDataChannel(PackageChannel, MirrorsChannel):
 
         if self._mirrorlist:
             mirrorlist = self._mirrorlist
-            item = fetcher.enqueue(mirrorlist)
+            item = fetcher.enqueue(mirrorlist, self)
             fetcher.run(progress=progress)
 
             if item.getStatus() is FAILED:
@@ -197,9 +197,9 @@ class RPMMetaDataChannel(PackageChannel, MirrorsChannel):
             except Error:
                 pass
         
-        item = fetcher.enqueue(repomd)
+        item = fetcher.enqueue(repomd, self)
         if self._fingerprint:
-            gpgitem = fetcher.enqueue(reposig)
+            gpgitem = fetcher.enqueue(reposig, self)
         fetcher.run(progress=progress)
 
         if item.getStatus() is FAILED:
@@ -261,7 +261,7 @@ class RPMMetaDataChannel(PackageChannel, MirrorsChannel):
             filelists = info["filelists"]
 
         fetcher.reset()
-        item = fetcher.enqueue(primary["url"],
+        item = fetcher.enqueue(primary["url"], self,
                                md5=primary.get("md5"),
                                uncomp_md5=primary.get("uncomp_md5"),
                                sha=primary.get("sha"),
@@ -269,7 +269,7 @@ class RPMMetaDataChannel(PackageChannel, MirrorsChannel):
                                sha256=primary.get("sha256"),
                                uncomp_sha256=primary.get("uncomp_sha256"),
                                uncomp=True)
-        flitem = fetcher.enqueue(filelists["url"],
+        flitem = fetcher.enqueue(filelists["url"], self, 
                                  md5=filelists.get("md5"),
                                  uncomp_md5=filelists.get("uncomp_md5"),
                                  sha=filelists.get("sha"),
@@ -278,7 +278,7 @@ class RPMMetaDataChannel(PackageChannel, MirrorsChannel):
                                  uncomp_sha256=filelists.get("uncomp_sha256"),
                                  uncomp=True)
         if "updateinfo" in info:
-            uiitem = fetcher.enqueue(info["updateinfo"]["url"],
+            uiitem = fetcher.enqueue(info["updateinfo"]["url"], self, 
                                    md5=info["updateinfo"].get("md5"),
                                    uncomp_md5=info["updateinfo"].get("uncomp_md5"),
                                    sha=info["updateinfo"].get("sha"),
diff --git a/smart/control.py b/smart/control.py
index d44abe7..8be2e92 100644
--- a/smart/control.py
+++ b/smart/control.py
@@ -844,7 +844,7 @@ class Control(object):
             pkgitems[pkg] = []
             for url in urls:
                 media = self._achanset.getMedia(channel)
-                pkgitems[pkg].append(fetcher.enqueue(url, media=media,
+                pkgitems[pkg].append(fetcher.enqueue(url, channel, media=media,
                                                      md5=info.getMD5(url),
                                                      sha=info.getSHA(url),
                                                      sha256=info.getSHA256(url),
@@ -978,7 +978,7 @@ class AvailableChannelSet(object):
                 fetcher.setCaching(ALWAYS)
                 fetcher.setForceCopy(True)
                 fetcher.setLocalPathPrefix(channel.getAlias()+"%%")
-                channelsitem = fetcher.enqueue(url)
+                channelsitem = fetcher.enqueue(url, channel)
                 fetcher.run("channels", progress=progress)
                 fetcher.setForceCopy(False)
                 fetcher.setLocalPathPrefix(None)
@@ -997,7 +997,7 @@ class AvailableChannelSet(object):
                     fetcher.reset()
                     fetcher.setLocalDir(tmpdir, mangle=True)
                     fetcher.setCaching(NEVER)
-                    tmpitem = fetcher.enqueue(url)
+                    tmpitem = fetcher.enqueue(url, channel)
                     fetcher.run("tmp", progress=progress)
                     if tmpitem.getStatus() is FAILED:
                         break
diff --git a/smart/fetcher.py b/smart/fetcher.py
index 343025f..8390f01 100644
--- a/smart/fetcher.py
+++ b/smart/fetcher.py
@@ -36,6 +36,7 @@ import os
 import re
 import signal
 import threading
+import base64
 
 MAXRETRIES = 30
 SPEEDDELAY = 1
@@ -45,6 +46,41 @@ SOCKETTIMEOUT = 600
 
 class FetcherCancelled(Error): pass
 
+class Useraccount(object):
+    userpasswd = {}
+
+    @classmethod
+    def getUserPwd(cls, key):
+        if cls.userpasswd.has_key(key):
+            return cls.userpasswd[key]
+        else:
+            return None
+
+    @classmethod
+    def setUserPwd(cls, key, userpwd):
+        cls.userpasswd[key] = userpwd
+
+class Opener(urllib.FancyURLopener):
+    user = None
+    passwd = None
+    def __init__(self, *args, **kwargs):
+        self.retrycount = 3
+        urllib.FancyURLopener.__init__(self, *args, **kwargs)
+    def http_error_401(self, url, fp, errcode, errmsg, headers, data=None):
+        self.retrycount -= 1
+        if self.retrycount <= 0:
+            return self.http_error_default(url, fp, errcode, errmsg, headers)
+        return urllib.FancyURLopener.http_error_401(self, url, fp, errcode, errmsg, headers, data)
+    def get_user_passwd(self, host, realm, clear_cache = 0):
+        return self.user, self.passwd
+    def http_error_default(self, url, fp, errcode, errmsg, headers):
+        if not fp:
+            fp = open("/dev/null")
+        info = urllib.addinfourl(fp, headers, "http:" + url)
+        info.errcode = errcode
+        info.errmsg = errmsg
+        return info
+
 class Fetcher(object):
 
     _registry = {}
@@ -173,11 +209,14 @@ class Fetcher(object):
     def getActiveDownloads(self):
         return self._activedownloads
 
-    def enqueue(self, url, **info):
+    def enqueue(self, url, channel=None, **info):
         if url in self._items:
             raise Error, _("%s is already in the queue") % url
         mirror = self._mirrorsystem.get(url)
-        item = FetchItem(self, url, mirror)
+        if channel:
+            item = FetchItem(self, url, mirror, channel)
+        else:
+            item = FetchItem(self, url, mirror)
         self._items[url] = item
         if info:
             item.setInfo(**info)
@@ -452,11 +491,12 @@ class Fetcher(object):
 
 class FetchItem(object):
 
-    def __init__(self, fetcher, url, mirror):
+    def __init__(self, fetcher, url, mirror, channel=None):
         self._fetcher = fetcher
         self._url = url
+        self._channel = channel
         self._mirror = mirror
-        self._urlobj = URL(mirror.getNext())
+        self._urlobj = URL(mirror.getNext(), channel)
         self._retries = 0
         self._starttime = None
         self._current = 0
@@ -497,10 +537,10 @@ class FetchItem(object):
         self._retries += 1
         url = self._mirror.getNext()
         if url:
-            self._urlobj.set(url)
+            self._urlobj.set(url, self._channel)
             return True
         else:
-            self._urlobj.set(self._url)
+            self._urlobj.set(self._url, self._channel)
             return False
 
     def getOriginalURL(self):
@@ -620,9 +660,9 @@ class FetchItem(object):
         self.setFailed(_("Cancelled"))
 
 class URL(object):
-    def __init__(self, url=None):
+    def __init__(self, url=None, channel=None):
         if url:
-            self.set(url)
+            self.set(url, channel)
         else:
             self.reset()
 
@@ -636,7 +676,7 @@ class URL(object):
         self.path = ""
         self.query = ""
 
-    def set(self, url):
+    def set(self, url, channel):
         if url.startswith("/"):
             self.scheme = "file"
             rest = url
@@ -654,6 +694,21 @@ class URL(object):
                 self.path = self.path[1:]
             return
         self.original = url
+
+        self.channel = channel
+        baseurl = ''
+        alias = ''
+        if channel and hasattr(channel, '_baseurl'):
+            baseurl = channel._baseurl
+        if channel and hasattr(channel, '_alias'):
+            alias = channel._alias
+        if baseurl.endswith('/'):
+            self.baseurl = os.path.dirname(baseurl)
+        else:
+            self.baseurl = baseurl
+
+        rooturl = os.path.dirname(self.baseurl)
+	
         host, rest = urllib.splithost(rest)
         user, host = urllib.splituser(host)
         if user:
@@ -669,6 +724,40 @@ class URL(object):
         self.passwd = self.passwd and urllib.unquote(self.passwd) or ""
         self.path = urllib.unquote(self.path)
 
+        opener = Opener()
+        remote = opener.open(str(self))
+        cached = 1
+        while hasattr(remote, 'errcode') and str(remote.errcode) == '401':
+            username = ''
+            passwd = ''
+            if cached:
+                cached = 0
+                password_list = sysconf.get('account')
+                if password_list and password_list.has_key(alias):
+                    account = eval(password_list[alias])
+                    username = account['user']
+                    passwd = base64.b64decode(account['password'])
+                elif (not Useraccount.getUserPwd(rooturl)):
+                    while (not username):
+                        username = iface.askInput(_("User name"), _("User name is needed for '%s'.") % self.baseurl).strip()
+                    while (not passwd):
+                        passwd = iface.askPassword(self.baseurl, NEVER).strip()
+                else:
+                    username = Useraccount.getUserPwd(rooturl)['user']
+                    passwd = Useraccount.getUserPwd(rooturl)['password']
+            else:
+                while (not username):
+                    username = iface.askInput(_("User name"), _("User name is needed for '%s'.") % self.baseurl).strip()
+                while (not passwd):
+                    passwd = iface.askPassword(self.baseurl, NEVER).strip()
+           	
+            Useraccount.setUserPwd(rooturl, {'user':username, 'password':passwd})
+            self.user = username
+            self.passwd = passwd
+            sysconf.set('account.'+alias, '{\'user\': \''+username+'\', \'password\': \''+base64.b64encode(passwd)+'\'}')
+
+            remote = opener.open(str(self))
+
     def __str__(self):
         if self.scheme in Fetcher.getLocalSchemes():
             return "%s://%s" % (self.scheme, urllib.quote(self.path))
@@ -1162,27 +1251,6 @@ class URLLIBHandler(FetcherHandler):
         import urllib, rfc822, calendar
         from time import time, sleep
 
-        class Opener(urllib.FancyURLopener):
-            user = None
-            passwd = None
-            def __init__(self, *args, **kwargs):
-                self.retrycount = 3
-                urllib.FancyURLopener.__init__(self, *args, **kwargs)
-            def http_error_401(self, url, fp, errcode, errmsg, headers, data=None):
-                self.retrycount -= 1
-                if self.retrycount <= 0:
-                    return self.http_error_default(url, fp, errcode, errmsg, headers)
-                return urllib.FancyURLopener.http_error_401(self, url, fp, errcode, errmsg, headers, data)
-            def get_user_passwd(self, host, realm, clear_cache = 0):
-                return self.user, self.passwd
-            def http_error_default(self, url, fp, errcode, errmsg, headers):
-                if not fp:
-                    fp = open("/dev/null")
-                info = urllib.addinfourl(fp, headers, "http:" + url)
-                info.errcode = errcode
-                info.errmsg = errmsg
-                return info
-
         opener = Opener()
         
         fetcher = self._fetcher
@@ -1231,6 +1299,9 @@ class URLLIBHandler(FetcherHandler):
 
                 remote = opener.open(url.original)
 
+                if (hasattr(remote, "errcode") and remote.errcode == 401):
+                    remote = opener.open(str(url))
+
                 if hasattr(remote, "errcode") and remote.errcode == 416:
                     # Range not satisfiable, try again without it.
                     opener.addheaders = [x for x in opener.addheaders
diff --git a/smart/report.py b/smart/report.py
index 25d8396..4645d4a 100644
--- a/smart/report.py
+++ b/smart/report.py
@@ -198,9 +198,13 @@ class Report(object):
             else:
                 continue
             info = loader.getInfo(pkg)
+            channel = loader.getChannel()
             for url in info.getURLs():
                 mirror = fetcher.getMirrorSystem().get(url)
-                item = FetchItem(fetcher, url, mirror)
+                if channel:
+                    item = FetchItem(fetcher, url, mirror, channel)
+                else:
+                    item = FetchItem(fetcher, url, mirror)
                 path = fetcher.getLocalPath(item)
                 if os.path.exists(path):
                     total += os.path.getsize(path)
-- 
1.8.3.2

